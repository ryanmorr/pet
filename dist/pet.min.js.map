{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/observer.js","src/patch.js","src/pet.js","src/update.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_update","addElement","elements","el","nodeType","hasAttribute","includes","push","hasChildNodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","children","Symbol","iterator","next","done","value","err","return","MutationObserver","mutations","default","reduce","mutation","addedNodes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","attributeName","target","observe","document","documentElement","childList","attributes","subtree","patch","node","newNode","nodeName","parentNode","replaceChild","cloneNode","data","childNodes","newChildNodes","Math","min","isEqualNode","nodeAttrs","newNodeAttrs","_i","removeChild","frag","createDocumentFragment","_i2","appendChild","_i3","name","removeAttribute","_i4","attr","_name","getAttribute","setAttribute","style","createElement","createTextNode","head","querySelectorAll","requestAnimationFrame","forEach","tpl","newElement","window","getComputedStyle","getPropertyValue","slice","replace","escapeQuoteRe","_patch","dataset","innerHTML","tokenRe","all","key","dispatchEvent","CustomEvent","bubbles","cancelable"],"mappings":"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","file":"pet.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * Import dependencies\r\n */\r\nimport update from './update';\r\n\r\n/**\r\n * If the element is a `pet` element\r\n * then add to the array\r\n *\r\n * @param {Array} elements\r\n * @param {Element} el\r\n * @api private\r\n */\r\nfunction addElement(elements, el) {\r\n    if (el.nodeType === 1 && el.hasAttribute('pet') && !elements.includes(el)) {\r\n        elements.push(el);\r\n    }\r\n    if (el.hasChildNodes()) {\r\n        for (const child of el.children) {\r\n            addElement(elements, child);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Collect any `pet` elements that have\r\n * been inserted into the DOM or had\r\n * data attributes changed so that the\r\n * template can be rendered/updated\r\n */\r\nconst observer = new MutationObserver((mutations) => {\r\n    update(mutations.reduce((elements, mutation) => {\r\n        if (mutation.addedNodes != null) {\r\n            for (const node of mutation.addedNodes) {\r\n                addElement(elements, node);\r\n            }\r\n        }\r\n        if (mutation.attributeName != null) {\r\n            addElement(elements, mutation.target);\r\n        }\r\n        return elements;\r\n    }, []));\r\n});\r\n\r\n/**\r\n * Create the mutation observer and start\r\n * observing the document for dynamically\r\n * inserted elements and changed attributes\r\n */\r\nobserver.observe(document.documentElement, {\r\n    childList: true,\r\n    attributes: true,\r\n    subtree: true\r\n});\r\n","/**\r\n * Patch a source node to match\r\n * another node\r\n *\r\n * @param {Node} node\r\n * @param {Node} newNode\r\n * @api private\r\n */\r\nexport default function patch(node, newNode) {\r\n    if (node.nodeType !== newNode.nodeType || node.nodeName !== newNode.nodeName) {\r\n        node.parentNode.replaceChild(newNode.cloneNode(true), node);\r\n        return;\r\n    }\r\n    if (newNode.nodeType === 3) {\r\n        const data = newNode.data;\r\n        if (node.data !== data) {\r\n            node.data = data;\r\n        }\r\n        return;\r\n    }\r\n    const childNodes = node.childNodes;\r\n    const newChildNodes = newNode.childNodes;\r\n    for (let i = Math.min(childNodes.length, newChildNodes.length) - 1; i >= 0; i--) {\r\n        patch(childNodes[i], newChildNodes[i]);\r\n    }\r\n    if (!node.isEqualNode(newNode)) {\r\n        const nodeAttrs = node.attributes;\r\n        const newNodeAttrs = newNode.attributes;\r\n        if (childNodes.length > newChildNodes.length) {\r\n            for (let i = childNodes.length - 1; i >= newChildNodes.length; i--) {\r\n                node.removeChild(childNodes[i]);\r\n            }\r\n        } else if (childNodes.length < newChildNodes.length) {\r\n            const frag = document.createDocumentFragment();\r\n            for (let i = childNodes.length; i < newChildNodes.length; i++) {\r\n                frag.appendChild(newChildNodes[i].cloneNode(true));\r\n            }\r\n            node.appendChild(frag);\r\n        }\r\n        for (let i = nodeAttrs.length - 1; i >= 0; i--) {\r\n            const name = nodeAttrs[i].name;\r\n            if (!newNode.hasAttribute(name)) {\r\n                node.removeAttribute(name);\r\n            }\r\n        }\r\n        for (let i = newNodeAttrs.length - 1; i >= 0; i--) {\r\n            const attr = newNodeAttrs[i];\r\n            const name = attr.name;\r\n            const value = attr.value;\r\n            if (node.getAttribute(name) !== value) {\r\n                node.setAttribute(name, value);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport './observer';\r\nimport update from './update';\r\n\r\n/**\r\n * Ensure `pet` elements do not display\r\n * the template as plain text\r\n */\r\nconst style = document.createElement('style');\r\nconst css = '[pet]::before { display: none !important; }';\r\nstyle.appendChild(document.createTextNode(css));\r\ndocument.head.appendChild(style);\r\n\r\n/**\r\n * Update the current `pet` elements currently\r\n * in the DOM\r\n */\r\nupdate(document.querySelectorAll('[pet]'));\r\n","/**\r\n * Import dependencies\r\n */\r\nimport patch from './patch';\r\n\r\n/**\r\n * Common variables\r\n */\r\nconst escapeQuoteRe = /\\\\['\"]/g;\r\nconst tokenRe = /\\{\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}\\}/g;\r\n\r\n/**\r\n * Get the template for an element\r\n * held within the `:before` pseudo-\r\n * element\r\n *\r\n * @param {String} tpl\r\n * @param {Object} values\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction getTemplate(el) {\r\n    const tpl = window.getComputedStyle(el, ':before').getPropertyValue('content');\r\n    return tpl ? tpl.slice(1, -1).replace(escapeQuoteRe, '\"') : null;\r\n}\r\n\r\n/**\r\n * Interpolate the template string with the\r\n * elements data attributes and convert into\r\n * DOM nodes\r\n *\r\n * @param {Element} el\r\n * @param {String} tpl\r\n * @return {Element}\r\n * @api private\r\n */\r\nfunction parseTemplate(el, tpl) {\r\n    const data = el.dataset;\r\n    const newElement = el.cloneNode();\r\n    newElement.innerHTML = tpl.replace(tokenRe, (all, key) => data[key] || '');\r\n    return newElement;\r\n}\r\n\r\n/**\r\n * Schedule an animation frame to\r\n * update each element in the array\r\n *\r\n * @param {Array} elements\r\n * @api private\r\n */\r\nexport default function update(elements) {\r\n    if (elements.length) {\r\n        requestAnimationFrame(() => {\r\n            elements.forEach((el) => {\r\n                const tpl = getTemplate(el);\r\n                if (tpl) {\r\n                    patch(el, parseTemplate(el, tpl));\r\n                    el.dispatchEvent(new CustomEvent('render', {\r\n                        bubbles: false,\r\n                        cancelable: false\r\n                    }));\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}