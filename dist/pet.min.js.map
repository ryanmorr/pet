{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/observer.js","src/patch.js","src/pet.js","src/update.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pet","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","onChange","mutations","elements","len","mutation","addedNodes","nLen","addElement","attributeName","target","_update2","default","el","nodeType","classList","contains","indexOf","push","hasChildNodes","children","_update","MutationObserver","WebKitMutationObserver","observe","document","documentElement","childList","attributes","subtree","patch","node","newNode","nodeName","parentNode","replaceChild","cloneNode","data","childNodes","newChildNodes","Math","min","isEqualNode","nodeAttrs","newNodeAttrs","_i","removeChild","frag","createDocumentFragment","_i2","appendChild","_i3","name","hasAttribute","removeAttribute","_i4","attr","_name","value","getAttribute","setAttribute","querySelectorAll","getTemplate","tpl","getComputedStyle","getPropertyValue","slice","replace","escapeQuoteRe","parseTemplate","dataset","newElement","innerHTML","tokenRe","all","key","update","requestAnimationFrame","_patch2","dispatchEvent","CustomEvent","bubbles","cancelable","_patch"],"mappings":"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","file":"pet.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * Import dependencies\r\n */\r\nimport update from './update';\r\n\r\n/**\r\n * Resolve the supported `MutationObserver`\r\n * implementation\r\n */\r\nconst MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\r\n\r\n/**\r\n * Callback for the mutation observer,\r\n * collects any `pet` elements that have\r\n * been inserted into the DOM or had\r\n * data attributes changed so that the\r\n * template can be rendered/updated\r\n *\r\n * @param {Array} mutations\r\n * @api private\r\n */\r\nfunction onChange(mutations) {\r\n    const elements = [];\r\n    for (let i = 0, len = mutations.length; i < len; i++) {\r\n        const mutation = mutations[i];\r\n        if (mutation.addedNodes != null) {\r\n            for (let n = 0, nLen = mutation.addedNodes.length; n < nLen; n++) {\r\n                addElement(elements, mutation.addedNodes[n]);\r\n            }\r\n        }\r\n        if (mutation.attributeName != null) {\r\n            addElement(elements, mutation.target);\r\n        }\r\n    }\r\n    update(elements);\r\n}\r\n\r\n/**\r\n * If the element is a `pet` element\r\n * then add to the array\r\n *\r\n * @param {Array} elements\r\n * @param {Element} el\r\n * @api private\r\n */\r\nfunction addElement(elements, el) {\r\n    if (el.nodeType === 1 && el.classList.contains('pet') && elements.indexOf(el) === -1) {\r\n        elements.push(el);\r\n    }\r\n    if (el.hasChildNodes()) {\r\n        for (let i = 0, children = el.children, len = children.length; i < len; i++) {\r\n            addElement(elements, children[i]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Create the mutation observer and start\r\n * observing the document body for dynamically\r\n * inserted elements and changed attributes\r\n */\r\nconst observer = new MutationObserver(onChange);\r\nobserver.observe(document.documentElement, {\r\n    childList: true,\r\n    attributes: true,\r\n    subtree: true\r\n});\r\n","/**\r\n * Patch a source node to match\r\n * another node\r\n *\r\n * @param {Node} node\r\n * @param {Node} newNode\r\n * @api private\r\n */\r\nexport default function patch(node, newNode) {\r\n    if (node.nodeType !== newNode.nodeType || node.nodeName !== newNode.nodeName) {\r\n        node.parentNode.replaceChild(newNode.cloneNode(true), node);\r\n        return;\r\n    }\r\n    if (newNode.nodeType === 3) {\r\n        const data = newNode.data;\r\n        if (node.data !== data) {\r\n            node.data = data;\r\n        }\r\n        return;\r\n    }\r\n    const childNodes = node.childNodes;\r\n    const newChildNodes = newNode.childNodes;\r\n    for (let i = Math.min(childNodes.length, newChildNodes.length) - 1; i >= 0; i--) {\r\n        patch(childNodes[i], newChildNodes[i]);\r\n    }\r\n    if (!node.isEqualNode(newNode)) {\r\n        const nodeAttrs = node.attributes;\r\n        const newNodeAttrs = newNode.attributes;\r\n        if (childNodes.length > newChildNodes.length) {\r\n            for (let i = childNodes.length - 1; i >= newChildNodes.length; i--) {\r\n                node.removeChild(childNodes[i]);\r\n            }\r\n        } else if (childNodes.length < newChildNodes.length) {\r\n            const frag = document.createDocumentFragment();\r\n            for (let i = childNodes.length; i < newChildNodes.length; i++) {\r\n                frag.appendChild(newChildNodes[i].cloneNode(true));\r\n            }\r\n            node.appendChild(frag);\r\n        }\r\n        for (let i = nodeAttrs.length - 1; i >= 0; i--) {\r\n            const name = nodeAttrs[i].name;\r\n            if (!newNode.hasAttribute(name)) {\r\n                node.removeAttribute(name);\r\n            }\r\n        }\r\n        for (let i = newNodeAttrs.length - 1; i >= 0; i--) {\r\n            const attr = newNodeAttrs[i];\r\n            const name = attr.name;\r\n            const value = attr.value;\r\n            if (node.getAttribute(name) !== value) {\r\n                node.setAttribute(name, value);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport './observer';\r\nimport update from './update';\r\n\r\n/**\r\n * Update the current `pet` elements currently\r\n * in the DOM\r\n */\r\nupdate(document.querySelectorAll('.pet'));\r\n","/**\r\n * Import dependencies\r\n */\r\nimport patch from './patch';\r\n\r\n/**\r\n * Common variables\r\n */\r\nconst escapeQuoteRe = /\\\\['\"]/g;\r\nconst tokenRe = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\r\n\r\n/**\r\n * Get the template for an element\r\n * held within the `:before` pseudo-\r\n * element\r\n *\r\n * @param {String} tpl\r\n * @param {Object} values\r\n * @return {String}\r\n * @api private\r\n */\r\nfunction getTemplate(el) {\r\n    const tpl = window.getComputedStyle(el, ':before').getPropertyValue('content');\r\n    return tpl ? tpl.slice(1, -1).replace(escapeQuoteRe, '\"') : null;\r\n}\r\n\r\n/**\r\n * Interpolate the template string with the\r\n * elements data attributes and convert into\r\n * DOM nodes\r\n *\r\n * @param {Element} el\r\n * @param {String} tpl\r\n * @return {Element}\r\n * @api private\r\n */\r\nfunction parseTemplate(el, tpl) {\r\n    const data = el.dataset;\r\n    const newElement = el.cloneNode();\r\n    newElement.innerHTML = tpl.replace(tokenRe, (all, key) => data[key] || '');\r\n    return newElement;\r\n}\r\n\r\n/**\r\n * Schedule an animation frame to\r\n * update each element in the array\r\n *\r\n * @param {Array} elements\r\n * @api private\r\n */\r\nexport default function update(elements) {\r\n    if (elements.length) {\r\n        requestAnimationFrame(() => {\r\n            for (let i = 0, len = elements.length; i < len; i++) {\r\n                const el = elements[i];\r\n                const tpl = getTemplate(el);\r\n                if (tpl) {\r\n                    patch(el, parseTemplate(el, tpl));\r\n                    el.dispatchEvent(new CustomEvent('render', {\r\n                        bubbles: false,\r\n                        cancelable: false\r\n                    }));\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}